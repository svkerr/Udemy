select(TailNum)
intersect(set1,set2)
set1 <- flights %>%
filter(DayofMonth == 31 & Dest == "DFW" & Distance > 500) %>%
select(TailNum)
set2 <- flights %>%
filter(DayofMonth == 1 & Dest == "DFW" & Distance > 500) %>%
select(TailNum)
intersect(set1,set2)
set1 <- flights %>%
filter(DayofMonth == 31 & Dest == "DFW" & Distance > 250) %>%
select(TailNum)
set2 <- flights %>%
filter(DayofMonth == 1 & Dest == "DFW" & Distance > 250) %>%
select(TailNum)
intersect(set1,set2)
set1 <- flights %>%
filter(DayofMonth == 31 & Dest == "DFW" & Distance > 25) %>%
select(TailNum)
set2 <- flights %>%
filter(DayofMonth == 1 & Dest == "DFW" & Distance > 25) %>%
select(TailNum)
intersect(set1,set2)
flights %>%
filter(DayofMonth == 31 & Dest == "DFW" & Distance > 100)
filter(DayofMonth == 31 & DayofMonth == 1 & Dest == "DFW" & Distance > 100)
flights %>%
filter(DayofMonth == 31 & DayofMonth == 1 & Dest == "DFW" & Distance > 100)
flights %>%
filter(DayofMonth == 31 | DayofMonth == 1 & Dest == "DFW" & Distance > 100)
flights %>%
filter(DayofMonth == 31 | DayofMonth == 1 & Dest == "DFW" & Distance > 1000)
flights %>%
filter(DayofMonth == 31 | DayofMonth == 1 & Dest == "DFW" & Distance > 2000)
flights %>%
filter(DayofMonth == 31 | DayofMonth == 1 & Dest == "DFW" & Distance > 2900)
filter(DayofMonth == 31 | DayofMonth == 1 & Dest == "DFW" & Distance > 3900)
flights %>%
filter(DayofMonth == 31 | DayofMonth == 1 & Dest == "DFW" & Distance > 3900)
filter((DayofMonth == 31 | DayofMonth == 1) & Dest == "DFW" & Distance > 2000)
flights %>%
filter((DayofMonth == 31 | DayofMonth == 1) & Dest == "DFW" & Distance > 2000)
flights %>%
filter((DayofMonth == 31 | DayofMonth == 1) & Dest == "DFW" & Distance > 200)
flights %>%
filter((DayofMonth == 31 | DayofMonth == 1) & Dest == "DFW" & Distance > 250)
flights %>%
table(Origin)
table(flights$Origin)
flights %>%
filter(Dest == "BOS")
rm(big_df)
rm(dataset)
rm(paki_df)
rm(paki.df)
rm(paki.points)
rm(lakers)
rm(pop)
rm(x1)
rmy1
rm(y1)
rm(x2)
rm(x3)
1:10
dbinom(4, size=12, prob=0.2)
dice <- 1:6
dice
x = c(5,12,13)
for (n in x) {
print(n^2)
}
setwd("/Users/stuart/R_Files/")
scan("domino.log")
pwd
ls()
pwd()
dir()
print(scan("twitter.R"))
print(scan("/Users/stuart/R_Files/twitter.R"))
?scan
print(scan(/Users/stuart/R_Files/twitter.R))
print(scan(twitter.R))
lwd()
lwd
getwd()
library(dplyr)
library(ggplot2)
print(scan("twitter.R"))
print(scan("Logit.R"))
print(scan("virginia_suicides.html"))
print(scan("/Users/stuart/DataSets/datasets.csv"))
roll <- function() {
die <- 1:6
dice <- sample(die, size=2, replace=TRUE)
sum(dice)
}
roll
roll()
roll()
roll()
roll()
roll()
roll()
roll()
x <- 1:10
for (n in x){
roll()
}
x <- 1:10
x
for (n in x){
roll()
}
i = 1
while (i <=10) i = i + 4
i
roll()
roll()
?rep
?for
?for
z <- 1:10
for(i in z){
roll <- function() {
die <- 1:6
dice <- sample(die, size=2, replace=TRUE)
sum(dice)  # last line in function must return a value
}
}
roll <- function() {
die <- 1:6
dice <- sample(die, size=2, replace=TRUE)
sum(dice)  # last line in function must return a value
}
for(i in z){ roll() }
z <- 1:10
for(i in z){
roll()
}
for(i in z){
i
}
for(i in z){
print(i)
}
for(i in z){
print(roll())
}
vec <- []
for(i in z){
vec.append(roll())
}
vec
vec = [ ]
for(i in z){
vec.append(roll())
}
vec
vec = []
for(i in z){
vec.append(roll())
}
vec
vec
vec = []
vec = [ ]
for(i in z){
vec.append(roll())
}
vec
vec = [ ]
for(i in z){
vec<- c(vec, roll())
}
vec
vec = [0]
for(i in z){
vec<- c(vec, roll())
}
vec
z <- 1:10
for(i in z){
vec<- c(vec, roll())
}
vec
z <- 1:10
for(i in z){
foo <- c(foo, roll())
}
foo
foo
z <- 1:10
for(i in z){
foo <- c(foo, roll())
}
foo
foo
rm(foo)
for(i in z){
foo <- c(foo, roll())
}
foo
for(i in z){
foo <- c(foo, roll())
}
foo
foo = []
for(i in z){
foo <- c(foo, roll())
}
foo
foo = vector()
for(i in z){
foo <- c(foo, roll())
}
foo
z <- 1:100
foo = vector()
for(i in z){
foo <- c(foo, roll())
}
foo
setwd("/Users/stuart/R_Files/")
library(dplyr)
library(ggplot2)
# Dice simulation function
roll <- function() {
die <- 1:6
dice <- sample(die, size=2, replace=TRUE)
sum(dice)  # last line in function must return a value
}
z <- 1:100
foo = vector()
for(i in z){
foo <- c(foo, roll())
}
foo
plot(foo)
roll2() <- function(die <- 1:6){
dice <- sample(die, size=2, replace=TRUE)
sum(dice)
}
z <- 1:100
foo = vector()
for(i in z){
foo <- c(foo, roll2())
}
foo
roll2 <- function(die <- 1:6){
dice <- sample(die, size=2, replace=TRUE)
sum(dice)
}
roll2 <- function(die <- 1:6){
dice <- sample(die, size=2, replace=TRUE)
sum(dice)
}
roll2 <- function(die <- 1:6){
dice <- sample(die, size=2, replace=TRUE)
sum(dice)
}
roll2 <- function(die = 1:6){
dice <- sample(die, size=2, replace=TRUE)
sum(dice)
}
z <- 1:100
foo = vector()
for(i in z){
foo <- c(foo, roll2())
}
foo
x = c(5,12,13)
for (n in x) {
print(n^2)
}
setwd("/Users/stuart/R_Files/")
library(dplyr)
library(ggplot2)
x = seq(0,1,0.1)
x <- seq(0,1,0.1)
y <- x^2
qplot(x,y)
y <- x^3
qplot(x,y)
y <- x^4
qplot(x,y)
qplot(foo, binwidth=1)
z <- 1:1000
foo = vector()
for(i in z){
foo <- c(foo, roll2())
}
foo
qplot(foo, binwidth=1)
?replicate
qplot(foo, binwidth=1)
replicate(100,roll())
foo2 <- replicate(100,roll())
qplot(foo2, binwidth=1)
foo2 <- replicate(10000,roll())
qplot(foo2, binwidth=1)
?sample
weights <- vector(1/8, 1/8, 1/8, 1/8, 1/8, 3/8)
?vector
weights <- c(1/8, 1/8, 1/8, 1/8, 1/8, 3/8)
roll_weighted <- function() {
die <- 1:6
dice <- sample(die, size=2, replace=TRUE, prob=weights)
sum(dice)  # last line in function must return a value
}
rolls <- replicate(10000,roll_weighted())
qplot(rolls, binwidth=1)
?sapply
sapply(x, print(x^2))
x
x = c(5,12,13)
sapply(x, print(x^2))
lapply(x, print(x^2))
lapply(x, x^2)
lapply(x, mean)
sapply(x, mean)
sapply(x, square)
x^2
is.vector(weights)
length(weights)
typeof(weights)
typeof(F)
hand <- c("ace","king","queen","jack", "10")
hand
hand[5] <- "ten"
hadn
hand
names(die)
names(foo)
names(loci)
rm(loci)
rm(lo)
rm(k)
rm(k)
rm(i)
rm(j)
rm(mapImageData1)
die
roll <- function() {
die <- 1:6
dice <- sample(die, size=2, replace=TRUE)
sum(dice)  # last line in function must return a value
}
die
die <- 1:6
names(die)
names(die) <- c("one", "two", "three", "four", "five", "six")
die
names(die)
attributes(die)
die + 1
die^3
names(die) <- NULL
attributes(die)
glimpse(salaryData)
getwd()
library(dplyr)
library(ggplot2)
setwd("/Users/Stuart/R_Files/Udemy_Data_Science")
### SECTION 1
### Lecture 2 Walk throught of a data science project
hdata <- readRDS("homedata_lesson1_dirty.rds")
hdata <- tbl_df(hdata)
glimpse(hdata)
summary(hdata)
ggplot(hdata,aes(x=Price)) + geom_density()
# Note: although Lot is an integer, each value represents a size of lot and thus should be modeledd as a category variable, else the algorithms will be "fooled" with an integer value
sort(unique(hdata$Lot))
# Note also that Year has at least one 0 value. Likely representing an unknown year house was built. Also, are there any NA values
sum(is.na(hdata$Year))
# Let's change any 0 Year values to NA
hdata$Year <- ifelse(hdata$Year <= 0, NA, hdata$Year)
summary(hdata$Year)
# Let's pretend we now have a clean data set (we read in a separate clean file)
hdata <- readRDS("homedata_lesson1_clean.rds")
# Let's turn Lot variable into a factor variable
hdata$Lot <- as.factor(hdata$Lot)
# Create an age variable:
thisyear <- 2015
hdata$Age <- thisyear - hdata$Year
# Let's see how age relates to price
ggplot(hdata,aes(x=Age, y=Price)) + geom_point() + geom_smooth(se=FALSE)
### Lecture 3 Starting with R and Data
### SECTION 2
### Lecture 5 Validating Models
salaryData <- readRDS("salaryData.RDS")
glimpse(salaryData)
glimpse(salaryData)
summary(salaryData$homeruns)
hist(salaryData$homeruns)
table(salaryData$homeruns)
qplot(salaryData$logSalary)
ggplot(salaryData,aes(x=logSalary)) + geom_density()
str(salaryData)
summary(salaryData)
ggplot(salaryData,aes(x=Salary)) + geom_density()
subset(salaryData, RBI > 130)
subset(salaryData, batting_average > 300)
subset(salaryData, batting_average > .300)
subset(salaryData, batting_average > .320)
lm(salaryData$Salary ~ salaryData$batting_average)
summary(lm(salaryData$Salary ~ salaryData$batting_average))
?setdiff
a <-c(1,2,3)
b <- c(4,5,6)
setdiff(a,b)
diff(a,b)
type(a)
typeof(a)
as.int(a)
as.integer(a)
as.integer(b)
diff(a,b)
diff(a)
setdiff(a,b)
(x <- c(sort(sample(1:20, 9)), NA))
(y <- c(sort(sample(3:23, 7)), NA))
union(x, y)
intersect(x, y)
setdiff(x, y)
setdiff(y, x)
setequal(x, y)
setdiff(b,a)
dim(salaryData)
dim(salaryData)
outcome <- salaryData$logSalary
outcome
vars <- setdiff(colnames(salaryData), c("salaryData$Salary","salaryData$Player","salaryData$logSalary"))
vars
vars <- setdiff(colnames(salaryData), c("Salary","Player","logSalary"))
vars
set.seed(45433622)
nr <- nrow(salaryData)
is.test <- runif(nr) <= 0.25
is.test
runif(nr)
plot(runif(nr))
summary(is.test)
test <- salaryData[is.test,]
nrow(test)
head(test)
train <- salaryData[!is.test,]
nrow(train)
salaryData$is.test <- is.test #put test marker in data for reproducibility
glimpse(salaryData)
fmla <- paste(outcome, "~", paste(vars, collapse="+")) # setting up the formula
fmla
?paste
h <- "happy"
b <- "birthday"
paste(a,b,sep=" ")
paste(h,b,sep=" ")
head(fmla)
outcome <- "logSalary"
fmla <- paste(outcome, "~", paste(vars, collapse="+")) # setting up the formula
head(fmla)
model <- lm(fmla,data=train)
summary(model)
salpred <- predict(model, newdata=salaryData)
glimpse(salpred)
salpred
attributes(salpred)
perf <- data.frame(logSalary = salaryData[[outcome]], pred=salPred, is.test=salaryData$is.test)
salPred <- predict(model, newdata=salaryData)
perf <- data.frame(logSalary = salaryData[[outcome]], pred=salPred, is.test=salaryData$is.test)
glimpse(perf)
sqerr <- (perf$LogSalary - perf$pred)^2
sqrt(mean(squerr[!is.test]))
sqrt(mean(sqerr[!is.test]))
sqerr
sqerr <- (perf$logSalary - perf$pred)^2
# Lets look at training error
sqrt(mean(sqerr[!is.test]))
sqerr
sqerr[!is.test]
sqrt(mean(sqerr[is.test]))
# Lets look at RMS training error
sqrt(mean(sqerr[!is.test]))
# Let's take a look at RMS of test error
sqrt(mean(sqerr[is.test]))
ggplot(perf, aes(x=pred, y=logSalary, color=is.test)) +
geom_point(aes(shape=is.test)) +
geom_abline(slope=1) +
scale_color_manual(values = c("FALSE" = "darkgray", "TRUE" = "darkblue")) +
coord_fixed()
library(RandomForest)
library(randomForest)
?randomForest
mod2 <- randomForest(train[,vars], train[,outcome])
perf2 <- data.frame(logSalary = salaryData[[outcome]], pred=salPred, is.test=salaryData$is.test)
sqerr <- (perf2$logSalary - perf2$pred)^2
sqerr2 <- (perf2$logSalary - perf2$pred)^2
sqrt(mean(sqerr2[!is.test]))
mod2 <- randomForest(train[,vars], train[,outcome])
perf2 <- data.frame(logSalary = salaryData[[outcome]], pred=salPred, is.test=salaryData$is.test)
sqerr2 <- (perf2$logSalary - perf2$pred)^2
sqrt(mean(sqerr2[!is.test]))
salPred2 <- predict(mod2, newdata=salaryData)
perf2 <- data.frame(logSalary = salaryData[[outcome]], pred=salPred2, is.test=salaryData$is.test)
sqerr2 <- (perf2$logSalary - perf2$pred)^2
sqrt(mean(sqerr2[!is.test]))
mod2 <- randomForest(train[,vars], train[,outcome])
# Now make predictions using our model
salPred2 <- predict(mod2, newdata=salaryData)
perf2 <- data.frame(logSalary = salaryData[[outcome]], pred=salPred2, is.test=salaryData$is.test)
sqerr2 <- (perf2$logSalary - perf2$pred)^2
sqrt(mean(sqerr2[!is.test]))
sqrt(mean(sqerr2[is.test]))
